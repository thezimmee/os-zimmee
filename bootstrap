#!/usr/bin/env bash
#
# installs and configures OS Zimmee

# set OSZ_ROOT
OSZ_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [[ -z "$OSZ_ROOT" ]] || [[ ! -f "${OSZ_ROOT}/bootstrap" ]]; then
    read -r -p "No \$OSZ_ROOT detected. Where is your OSZ_ROOT directory (must be an absolute path)? " < /dev/tty
    OSZ_ROOT="$REPLY"
fi

# source config & helper scripts
. $OSZ_ROOT/config
. $OSZ_ROOT/bash/helpers/logger
. $OSZ_ROOT/bash/helpers/link_files

# set other defaults
WRAPUP_REPORT=""

# grab command line arguments (see http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
for arg in "$@"; do
    case $arg in
        -U)
            CONFIG__run_type=update
            ;;
        -I)
            CONFIG__run_type=install
            ;;
        -S)
            CONFIG__run_type=setup
            ;;
        --app=*)
            APP_MODE=true
            APP_NAME="${arg#*=}"
            ;;
        --brew=*)
            APP_BREW="${arg#*=}"
            ;;
        --cask=*)
            APP_CASK="${arg#*=}"
            ;;
        -P)
            CONFIG__run_mode=preserve
            ;;
        -O)
            CONFIG__run_mode=overwrite
            ;;
        -B)
            CONFIG__run_mode=backup
            ;;
        -A)
            CONFIG__run_mode=ask
            ;;
        -W)
            CONFIG__show_wrapup_report=true
            ;;
        -D)
            DEBUG_MODE=true
            ;;
        --uninstall)
            CONFIG__run_type=uninstall
            CONFIG__run_mode=overwrite
            ;;
        -)
            # other non-valid arguments
            ;;
        *)
            # any argument that doesn't contain a hyphen is assumed to be the app name
            APP_MODE=true            
            APP_NAME="${arg}"
            ;;
    esac
done

save_log () {
    local msg="$1"
    local is_heading="$2"
    local prefix
    [[ -z $is_heading ]] && prefix="  - " || prefix="\n"
    WRAPUP_REPORT+="${prefix}${msg}\n"
}

run_script () {
    local dir="$1"
    local script="$2"
    local app_name=$(basename "${dir}")

    if [[ ! -d "$dir" ]] && [[ -z $APP_BREW ]] && [[ -z $APP_CASK ]]; then
        save_log "${FAIL}${END}: ${dir} does not exist and was not completed."
        return 1
    fi
    
    if [[ -f "${dir}/${script}" ]]; then
        # log path of any scripts that runs
        log "Loading ${app_name}/${script}..."

        # source script and log the result
        . "${dir}/${script}" && save_log "${SUCCESS}${END}: ${script} in ${app_name}/${script}" || save_log "${FAIL}${END}: ${script} in ${app_name}/${script}"
    fi
}

run_app () {
    local app_dir="$1"
    local app_name=$(basename "${app_dir}")
    local ran=0

    [[ ! -d "$app_dir" ]] && app_dir="${app_dir}.link"

    save_log "${BOLD}${app_name}${END}: " true

    if [[ "$CONFIG__run_type" = install ]]; then
        run_script "${app_dir}" install && ((ran++))
        run_script "${app_dir}" update && ((ran++))
        run_script "${app_dir}" setup && ((ran++))
        link_dotfiles "$app_name" && save_log "${SUCCESS}${END}: ${app_name} dotfiles linked successfully." || save_log "${FAIL}${END}: ${app_name} dotfiles failed."
    elif [[ "$CONFIG__run_type" = update ]]; then
        run_script "${app_dir}" update && ((ran++))
    elif [[ "$CONFIG__run_type" = setup ]]; then
        run_script "${app_dir}" setup && ((ran++))
        link_dotfiles "$app_name" && save_log "${SUCCESS}${END}: ${app_name} dotfiles linked successfully." || save_log "${FAIL}${END}: ${app_name} dotfiles failed."
    elif [[ "$CONFIG__run_type" = uninstall ]]; then
        run_script "${app_dir}" uninstall && ((ran++))
        if [[ "$APP_BREW" ]]; then
            brew uninstall "$APP_BREW" && save_log "${SUCCESS}${END}: brew uninstalled ${app_name}." || save_log "${GREEN}FAIL${END}: brew uninstall ${app_name} failed."
        fi
        if [[ "$APP_CASK" ]]; then
            brew cask uninstall "$APP_CASK" && save_log "${SUCCESS}${END}: cask uninstalled ${app_name}." || save_log "${GREEN}FAIL${END}: cask uninstall ${app_name} failed."
        fi
    fi

    [[ $ran -gt 0 ]] && [[ -z $APP_MODE ]] && log "Finished ${BLUE}${app_name}${GREEN}!" success
}

# iterate over app directories to install/setup/update
run_all_apps () {
    [[ "$APP_MODE" ]] && { run_app "$APP_NAME"; return 0; }

    for dir in $(find -H "$OSZ_ROOT" -type d -mindepth 1 -maxdepth 1 -not -path '*.git*'); do
        run_app "$dir"
    done
}

# ask user what to do
run_type_prompt () {
    ask "What would you like to do?${END}\n${INDENT}  ${CYAN}[1]${END}: Install ${APP_NAME}\n${INDENT}  ${CYAN}[2]${END}: Update ${APP_NAME}\n${INDENT}  ${CYAN}[3]${END}: Set up ${APP_NAME}\n${INDENT}  ${CYAN}[4]${END}: Uninstall ${APP_NAME}\n${QUESTION}${CYAN} =>${END}"

    case "$REPLY" in
        1)
            CONFIG__run_type=install
            ;;
        2)
            CONFIG__run_type=update
            ;;
        3)
            CONFIG__run_type=setup
            ;;
        4)
            CONFIG__run_type=uninstall
            ;;
        *)
            CONFIG__run_type=setup
            APP_MODE=true
            APP_NAME="$REPLY"
            ;;
    esac
}

# ask user how to do it
run_mode_prompt () {
    ask "How would you like to handle file conflicts?${END}\n${INDENT}  ${CYAN}[p]${END}: Preserve / keep existing files\n${INDENT}  ${CYAN}[o]${END}: Overwrite existing files\n${INDENT}  ${CYAN}[b]${END}: Backup and replace existing files\n${INDENT}  ${CYAN}[a]${END}: Ask with each conflict\n${QUESTION}${CYAN} =>${END}"

    case "$REPLY" in
        p|P)
            CONFIG__run_mode=preserve
            ;;
        o|O)
            CONFIG__run_mode=overwrite
            ;;
        b|B)
            CONFIG__run_mode=backup
            ;;
        a|A)
            CONFIG__run_mode=ask
            ;;
    esac
}

setBrewApp () {
    local app
    local app_name
    local app_type
    local verb="install"

    [[ "$CONFIG__run_type" = uninstall ]] && verb="uninstall"

    # check for brew/cask in config settings
    if [[ -z "$1" ]]; then
        for app in "${CONFIG__brew_apps[@]}"; do
            if [[ "$app" == "$APP_NAME" ]]; then
                APP_BREW="$app"
                CONFIG__cask_apps=()
                CONFIG__brew_apps=("$app")
                return 0
            fi
        done
        for app in "${CONFIG__cask_apps[@]}"; do
            if [[ "$app" == "$APP_NAME" ]]; then
                APP_CASK="$app"
                CONFIG__brew_apps=()
                CONFIG__cask_apps=("$app")
                return 0
            fi
        done
    fi

    # skip if either APP_BREW or APP_CASK already exist
    if [[ $APP_BREW ]] || [[ $APP_CASK ]]; then
        return 0
    fi

    ask "${1:-No brew or cask was found for ${APP_NAME}. What is the name of the brew or cask app you would like to ${verb}?}"
    app_name="$REPLY"

    ask "Should this be installed with [${CYAN}b${END}${BOLD}]rew? Or [${CYAN}c${END}${BOLD}]ask?"
    if [[ "$REPLY" =~ ^(c|C|cask|Cask)$ ]]; then
        app_type=cask
        APP_CASK="$app_name"
        CONFIG__cask_apps=("$app_name")
        CONFIG__brew_apps=()
    elif [[ "$REPLY" =~ ^(b|B|brew|Brew)$ ]]; then
        app_type=brew
        APP_BREW="$app_name"
        CONFIG__brew_apps=("$app_name")
        CONFIG__cask_apps=()
    else
        log "Invalid response."
        setBrewType "What is the name of your brew or cask you would like to install?"
    fi
}

reset_config () {
    unset CONFIG__run_type
    unset CONFIG__run_mode
    unset CONFIG__brew_apps
    unset CONFIG__cask_apps
    unset APP_MODE
    unset APP_NAME
    unset APP_BREW
    unset APP_CASK
    unset SETUP_VERB
    unset DEBUG_MODE
}

setup_config () {
    local scripts_to_run
    # default APP_NAME to OSZ if no app is specified (which runs everything)
    [[ -z $APP_MODE ]] && APP_NAME="OSZ"
    # set run type
    [[ -z $CONFIG__run_type ]] && run_type_prompt
    # set run mode
    [[ -z $CONFIG__run_mode ]] && CONFIG__run_mode=ask

    # if in APP_MODE, check for a corresponding brew app
    if [[ $APP_MODE ]]; then
        if [[ $CONFIG__run_type = install ]]; then
            setBrewApp
            app_details=" ${END}${BOLD}(${MAGENTA}"
            [[ $APP_BREW ]] && app_details+="${APP_BREW} brew"
            [[ $APP_CASK ]] && app_details+="${APP_CASK} cask"
            app_details+="${END}${BOLD})"
        elif [[ $CONFIG__run_type = uninstall ]]; then
            setBrewApp
        fi
    fi

    # SETUP_VERB for log messages
    [[ $CONFIG__run_type = install ]] && SETUP_VERB="installing" && scripts_to_run="install, update, and setup"
    [[ $CONFIG__run_type = update ]] && SETUP_VERB="updating" && scripts_to_run="update"
    [[ $CONFIG__run_type = setup ]] && SETUP_VERB="setting up" && scripts_to_run="setup"
    [[ $CONFIG__run_type = uninstall ]] && SETUP_VERB="uninstalling" && scripts_to_run="uninstall"

    # build info message to confirm with user what is going to happen
    confirm_msg="${BOLD}${SETUP_VERB^} ${BLUE}${APP_NAME}${app_details}${END}${BOLD} in ${BLUE}${CONFIG__run_mode} mode${END}${BOLD}"
    [[ $DEBUG_MODE ]] && confirm_msg+=" ${YELLOW}in DEBUG MODE${END}${BOLD}." || confirm_msg+="."
    confirm_msg+=" This will do the following:${END}"
    if [[ $CONFIG__run_type = install ]] && [[ -z $APP_MODE ]]; then
        confirm_msg+="\n${INDENT}  - Install Homebrew."
        confirm_msg+="\n${INDENT}  - Install any apps you have configured to install."
    fi
    if [[ $CONFIG__run_type = update ]]; then
        confirm_msg+="\n${INDENT}  - Update Homebrew."
        [[ -z $APP_MODE ]] && confirm_msg+="\n${INDENT} - Update apps from the app store."
    fi
    confirm_msg+="\n${INDENT}  - Run any ${scripts_to_run} script(s) in ${APP_NAME}."
    if [[ $CONFIG__run_type = uninstall ]]; then
        [[ $APP_BREW ]] && confirm_msg+="\n${INDENT}  - Uninstall ${APP_NAME} with 'brew uninstall ${APP_NAME}'."
        [[ $APP_CASK ]] && confirm_msg+="\n${INDENT}  - Uninstall ${APP_NAME} with 'brew cask uninstall ${APP_NAME}'."
        [[ -z $APP_MODE ]] && confirm_msg+="\n${INDENT}  - Uninstall Homebrew."
    fi
    [[ $CONFIG__run_type != uninstall ]] && confirm_msg+="\n${INDENT}  - Symlink any files ending in *.link to your \$HOME directory."
    # confirm settings
    if [[ $CONFIG__run_mode = overwrite ]] && [[ $CONFIG__run_type != uninstall ]]; then
        continue_when_ready "${confirm_msg}\n${INDENT}${RED}This will automatically overwrite any ${APP_NAME} configuration you have set up${END}${BOLD}.\n${INDENT}Type '${CYAN}yes${END}${BOLD}' to continue:${END} ${CYAN}=>${END}${BOLD}" "yes"
    else
        continue_when_ready "${confirm_msg}\n${CYAN}=> ${END}${BOLD}Hit [${CYAN}enter${END}${BOLD}] to continue..."
    fi
}

# set up config / user environment
echo ''
setup_config

## run it
# install
if [[ $CONFIG__run_type = install ]]; then
    save_log "Homebrew:" true
    . "${OSZ_ROOT}/install" && save_log "${SUCCESS}${END}: Homebrew install completed for ${APP_NAME}." || { save_log "OSZ installation failed."; log "Something went wrong installing OSZ..." fail; exit 1; }
    log "Homebrew install complete! ${BLUE}Run 'brew clean' to clean up old stuff." important
fi
# full update
if [[ "$CONFIG__run_type" = update ]] || [[ $CONFIG__run_type = install ]]; then
    # update homebrew apps
    log "Updating Homebrew and brew apps..."
    brew update && brew upgrade && brew doctor && save_log "${SUCCESS}${END}: Homebrew update complete." || save_log "${FAIL}${END}: Homebrew update failed."
    [[ -z $APP_MODE ]] && { log "Updating apps from the app store"; sudo softwareupdate -i -a; }
fi
# setup (all modes run this; it runs scripts from app folders)
if [[ $APP_MODE ]]; then
    run_app "${OSZ_ROOT}/${APP_NAME}" && save_log "${SUCCESS}${END}: ${APP_NAME} completed successfully." || save_log "${FAIL}${END}: ${APP_NAME} failed."
else
    run_all_apps && save_log "${SUCCESS}${END}: All apps completed successfully."  true|| save_log "${FAIL}${END}: One or more apps failed." true
    if [[ $CONFIG__run_type = uninstall ]]; then
        log "Uninstalling ${APP_NAME}..."
        . "${OSZ_ROOT}/uninstall" && save_log "${SUCCESS}${END}: ${APP_NAME} uninstalled completed." || save_log "${RED}FAILED${END}: ${APP_NAME} failed."
    fi
fi

# wrap up
log "${BLUE}${APP_NAME} ${CONFIG__run_type}${GREEN} is complete." success
echo ''
if [[ $CONFIG__show_wrapup_report = true ]]; then
    echo "--------------------"
    echo "  WRAP UP REPORT:"
    echo "--------------------"
    echo -e "$WRAPUP_REPORT"
    echo ''
    echo "--------------------"
fi
echo ''
# print last steps
if [[ -z $APP_MODE ]] && [[ $CONFIG__run_type = install ]]; then
    log "${YELLOW}${BOLD}[IMPORTANT]: Remember to complete any post-installation steps listed in ${MAGENTA}$OSZ_ROOT/README.md${END}${BOLD}.${END}" important "\n" false
fi
log "${GREEN}Enjoy OSZ!" info "\n" "[ ${YELLOW}:)${END} ] "
echo ""

reset_config