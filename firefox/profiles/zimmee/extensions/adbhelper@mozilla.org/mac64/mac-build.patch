diff -uwr android-tools/debian/makefiles/adb.mk android-tools-patched/debian/makefiles/adb.mk
--- android-tools/debian/makefiles/adb.mk	2014-11-24 21:27:47.000000000 +0100
+++ android-tools-patched/debian/makefiles/adb.mk	2015-05-20 15:21:43.000000000 +0200
@@ -10,13 +10,13 @@
 SRCS+= console.c
 SRCS+= file_sync_client.c
 SRCS+= fdevent.c
-SRCS+= get_my_path_linux.c
+SRCS+= get_my_path_osx.c
 SRCS+= services.c
 SRCS+= sockets.c
 SRCS+= transport.c
 SRCS+= transport_local.c
 SRCS+= transport_usb.c
-SRCS+= usb_linux.c
+SRCS+= usb_osx.c
 SRCS+= usb_vendors.c
 SRCS+= utils.c
 
@@ -40,7 +40,7 @@
 CPPFLAGS+= -DADB_HOST=1
 CPPFLAGS+= -I$(SRCDIR)/core/adb
 CPPFLAGS+= -I$(SRCDIR)/core/include
-CPPFLAGS+= -include /usr/include/android/arch/linux-x86/AndroidConfig.h
+#CPPFLAGS+= -include /usr/include/android/arch/linux-x86/AndroidConfig.h
 
 LIBS+= -lc -lpthread -lz -lcrypto
 
diff -uwr android-tools/debian/makefiles/ext4_utils.mk android-tools-patched/debian/makefiles/ext4_utils.mk
--- android-tools/debian/makefiles/ext4_utils.mk	2014-11-24 21:27:47.000000000 +0100
+++ android-tools-patched/debian/makefiles/ext4_utils.mk	2015-05-20 15:21:52.000000000 +0200
@@ -38,9 +38,9 @@
 CPPFLAGS+= -I/usr/include
 CPPFLAGS+= -I$(SRCDIR)/core/include
 CPPFLAGS+= -I$(SRCDIR)/core/libsparse/include
-CPPFLAGS+= -include /usr/include/android/arch/linux-x86/AndroidConfig.h
+#CPPFLAGS+= -include /usr/include/android/arch/linux-x86/AndroidConfig.h
 
-LIBS+= -lz -lselinux
+LIBS+= -lz
 
 OBJS= $(SRCS:.c=.o)
 
diff -uwr android-tools/debian/makefiles/fastboot.mk android-tools-patched/debian/makefiles/fastboot.mk
--- android-tools/debian/makefiles/fastboot.mk	2014-11-24 21:27:47.000000000 +0100
+++ android-tools-patched/debian/makefiles/fastboot.mk	2015-05-20 15:26:11.000000000 +0200
@@ -7,8 +7,8 @@
 SRCS+= engine.c
 SRCS+= fastboot.c
 SRCS+= protocol.c
-SRCS+= usb_linux.c
-SRCS+= util_linux.c
+SRCS+= usb_osx.c
+SRCS+= util_osx.c
 
 VPATH+= $(SRCDIR)/core/libzipfile
 SRCS+= centraldir.c
@@ -39,9 +39,9 @@
 CPPFLAGS+= -I$(SRCDIR)/core/mkbootimg
 CPPFLAGS+= -I$(SRCDIR)/extras/ext4_utils
 CPPFLAGS+= -I$(SRCDIR)/core/libsparse/include
-CPPFLAGS+= -include /usr/include/android/arch/linux-x86/AndroidConfig.h
+#CPPFLAGS+= -include /usr/include/android/arch/linux-x86/AndroidConfig.h
 
-LIBS+= -lz -lselinux
+LIBS+= -lz -framework CoreServices -framework IOKit -framework Carbon
 
 OBJS= $(SRCS:.c=.o)
 
diff -uwr android-tools/extras/ext4_utils/make_ext4fs.c android-tools-patched/extras/ext4_utils/make_ext4fs.c
--- android-tools/extras/ext4_utils/make_ext4fs.c	2013-05-29 22:16:54.000000000 +0200
+++ android-tools-patched/extras/ext4_utils/make_ext4fs.c	2015-05-20 15:29:17.000000000 +0200
@@ -59,9 +59,9 @@
 
 #else
 
-#include <selinux/selinux.h>
-#include <selinux/label.h>
-#include <selinux/android.h>
+//#include <selinux/selinux.h>
+//#include <selinux/label.h>
+//#include <selinux/android.h>
 
 #define O_BINARY 0
 
@@ -181,14 +181,14 @@
 #endif
 		}
 #ifndef USE_MINGW
-		if (sehnd) {
-			if (selabel_lookup(sehnd, &dentries[i].secon, dentries[i].path, stat.st_mode) < 0) {
-				error("cannot lookup security context for %s", dentries[i].path);
-			}
-
-			if (dentries[i].secon && verbose)
-				printf("Labeling %s as %s\n", dentries[i].path, dentries[i].secon);
-		}
+		// if (sehnd) {
+		// 	if (selabel_lookup(sehnd, &dentries[i].secon, dentries[i].path, stat.st_mode) < 0) {
+		// 		error("cannot lookup security context for %s", dentries[i].path);
+		// 	}
+
+		// 	if (dentries[i].secon && verbose)
+		// 		printf("Labeling %s as %s\n", dentries[i].path, dentries[i].secon);
+		// }
 #endif
 
 		if (S_ISREG(stat.st_mode)) {
@@ -231,10 +231,10 @@
 		dentries[0].file_type = EXT4_FT_DIR;
 		dentries[0].uid = 0;
 		dentries[0].gid = 0;
-		if (sehnd) {
-			if (selabel_lookup(sehnd, &dentries[0].secon, dentries[0].path, dentries[0].mode) < 0)
-				error("cannot lookup security context for %s", dentries[0].path);
-		}
+	 // if (sehnd) {
+	 // 	if (selabel_lookup(sehnd, &dentries[0].secon, dentries[0].path, dentries[0].mode) < 0)
+	 // 		error("cannot lookup security context for %s", dentries[0].path);
+	 // }
 		entries++;
 		dirs++;
 	}
@@ -280,12 +280,12 @@
 		 * the calls in the proper order.
 		 * Please see xattr_assert_sane() in contents.c
 		 */
-		ret = inode_set_selinux(entry_inode, dentries[i].secon);
-		if (ret)
-			error("failed to set SELinux context on %s\n", dentries[i].path);
-		ret = inode_set_capabilities(entry_inode, dentries[i].capabilities);
-		if (ret)
-			error("failed to set capability on %s\n", dentries[i].path);
+ // 	ret = inode_set_selinux(entry_inode, dentries[i].secon);
+ // 	if (ret)
+ // 		error("failed to set SELinux context on %s\n", dentries[i].path);
+ // 	ret = inode_set_capabilities(entry_inode, dentries[i].capabilities);
+ // 	if (ret)
+ // 		error("failed to set capability on %s\n", dentries[i].path);
 
 		free(dentries[i].path);
 		free(dentries[i].full_path);
@@ -576,20 +576,20 @@
 	inode_set_permissions(root_inode_num, root_mode, 0, 0, 0);
 
 #ifndef USE_MINGW
-	if (sehnd) {
-		char *secontext = NULL;
+	// if (sehnd) {
+	// 	char *secontext = NULL;
 
-		if (selabel_lookup(sehnd, &secontext, mountpoint, S_IFDIR) < 0) {
-			error("cannot lookup security context for %s", mountpoint);
-		}
-		if (secontext) {
-			if (verbose) {
-				printf("Labeling %s as %s\n", mountpoint, secontext);
-			}
-			inode_set_selinux(root_inode_num, secontext);
-		}
-		freecon(secontext);
-	}
+	// 	if (selabel_lookup(sehnd, &secontext, mountpoint, S_IFDIR) < 0) {
+	// 		error("cannot lookup security context for %s", mountpoint);
+	// 	}
+	// 	if (secontext) {
+	// 		if (verbose) {
+	// 			printf("Labeling %s as %s\n", mountpoint, secontext);
+	// 		}
+	// 		// inode_set_selinux(root_inode_num, secontext);
+	// 	}
+	// 	freecon(secontext);
+	// }
 #endif
 
 	ext4_update_free();
Seulement dans android-tools-patched/: fastboot
